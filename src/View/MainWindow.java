
package View;

import Model.Petrinet;
import static View.Gui.startSimulation;
import static View.Gui.paintReachabilityTree;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.util.StringTokenizer;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Edwin
 */

public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {                                
        initComponents();
        setTitle("PROYECTO FINAL REDES DE PETRI ESTOCASTICAS");
        setLocationRelativeTo(null);        
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loadStochasticPetriNet = new javax.swing.JButton();
        simulateStochasticPetriNet = new javax.swing.JButton();
        createReachabilityTree = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        spnArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        loadStochasticPetriNet.setText("Cargar Red");
        loadStochasticPetriNet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadStochasticPetriNetActionPerformed(evt);
            }
        });

        simulateStochasticPetriNet.setText("Simular");
        simulateStochasticPetriNet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulateStochasticPetriNetActionPerformed(evt);
            }
        });

        createReachabilityTree.setText("Crear Arbol de alcanzabilidad");
        createReachabilityTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createReachabilityTreeActionPerformed(evt);
            }
        });

        jLabel1.setText("Creado por: Edwin Alexander Bohorquez, Kevin Alexander Castro");

        spnArea.setColumns(20);
        spnArea.setRows(5);
        jScrollPane1.setViewportView(spnArea);

        jLabel2.setText("Ingrese los elementos de la red de Petri:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(simulateStochasticPetriNet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(loadStochasticPetriNet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(createReachabilityTree, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jLabel1)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loadStochasticPetriNet, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(createReachabilityTree, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(simulateStochasticPetriNet, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 136, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadStochasticPetriNetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadStochasticPetriNetActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("*.txt","txt"));        
        int respuesta = fc.showOpenDialog(this);        
        String path = "";
        if (respuesta == JFileChooser.APPROVE_OPTION) {
            path = fc.getSelectedFile().toString();
            try {                 
                DataInputStream in = new DataInputStream(new FileInputStream(path));
                String text = "";                
                while (in.available() != 0) {
                    text += in.readLine() + "\n";                    
                }
                spnArea.setText(text);
                in.close();                                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,"File input error");
            }
        }                      
    }//GEN-LAST:event_loadStochasticPetriNetActionPerformed
       
    private void simulateStochasticPetriNetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simulateStochasticPetriNetActionPerformed
        if( spnArea.getText().length() == 0 ){
            JOptionPane.showMessageDialog(null, "Debe ingresar la red de Petri!", "Mensaje de sistema", JOptionPane.ERROR_MESSAGE);
        }            
        else{
            if( createPetriNetObject() != null ) 
                startSimulation(createPetriNetObject());        
        }
    }//GEN-LAST:event_simulateStochasticPetriNetActionPerformed

    private void createReachabilityTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createReachabilityTreeActionPerformed
        if( spnArea.getText().length() == 0 ){
            JOptionPane.showMessageDialog(null, "Debe ingresar la red de Petri!", "Mensaje de sistema", JOptionPane.ERROR_MESSAGE);
        }            
        else{
            if( createPetriNetObject() != null )
                paintReachabilityTree(createPetriNetObject());                            
        }        
    }//GEN-LAST:event_createReachabilityTreeActionPerformed

    public Petrinet createPetriNetObject(){
        Petrinet pn = new Petrinet("PetriNet");
        String content = new String(spnArea.getText());
        if( !content.toLowerCase().contains("places:") || 
            !content.toLowerCase().contains("transitions:") || 
            !content.toLowerCase().contains("arcs:") ){
            JOptionPane.showMessageDialog(null,"Error al crear la red, verifique la notacion!","Mensaje de sistema",JOptionPane.ERROR_MESSAGE);            
            return null;
        }
        StringTokenizer st = new StringTokenizer(content,"\n");                        
        String line;             
        while( st.hasMoreTokens() ){
            line = st.nextToken();                        
            if( line.toLowerCase().startsWith("places:") ){
                break;
            }
            if( line.length() != 0 && !line.toLowerCase().startsWith("transitions:") ){                        
                String[] result = line.split(",");     
                String name = result[0].replaceAll("\\s","").replace("(", "");                                      
                double rate = Double.parseDouble(result[1].replaceAll("\\s",""));
                int level = Integer.parseInt(result[2].replaceAll("\\s","").replace(")",""));                                         
                pn.transition(name, rate, level);                                                
            }                                                            
        }
        while( st.hasMoreTokens() ){
            line = st.nextToken();                        
            if( line.toLowerCase().startsWith("arcs:") ){
                break;
            }
            if( line.length() != 0 ){                        
                String[] result = line.split(",");        
                if( result.length == 3 ){
                String name = result[0].replaceAll("\\s","").replace("(", "");                                      
                int initial = Integer.parseInt(result[1].replaceAll("\\s","")); 
                int level = Integer.parseInt(result[2].replaceAll("\\s","").replace(")",""));                
                pn.place(name, initial, level);                                                
            }else{//hay dos parametros
                String name = result[0].replaceAll("\\s","").replace("(", "");                                      
                int level = Integer.parseInt(result[1].replaceAll("\\s","").replace(")",""));                                         
                pn.place(name,level);                 
                } 
            }                                                            
        }                                                        
        while( st.hasMoreTokens() ){
            line = st.nextToken();                        
            if( line.length() != 0 ){                        
                String[] result = line.split(",");                                                 
                if( result[1].trim().toLowerCase().startsWith("p",1) ){                            
                    String name = result[0].replaceAll("\\s","").replace("(", "");                                      
                    String place = result[1].replaceAll("\\s","");
                    String transition = result[2].replaceAll("\\s","").replace(")", "");
                    if( pn.getPlace(place) == null ){
                        JOptionPane.showMessageDialog(null,"Error, usted no ha creado el lugar "+place,"Mensaje de sistema",JOptionPane.ERROR_MESSAGE);            
                        return null;
                    }else{
                        if( pn.getTransition(transition) == null ){
                            JOptionPane.showMessageDialog(null,"Error, usted no ha creado la transicion "+transition,"Mensaje de sistema",JOptionPane.ERROR_MESSAGE);            
                            return null;
                        }else{
                            pn.arc(name,pn.getPlace(place),pn.getTransition(transition));           
                        }
                    }                                                   
                }else{//el arco va de una trsnsicion a un lugar                            
                    String name = result[0].replaceAll("\\s","").replace("(", "");                                      
                    String transition = result[1].replaceAll("\\s","");
                    String place = result[2].replaceAll("\\s","").replace(")", "");
                    if( pn.getPlace(place) == null ){
                        JOptionPane.showMessageDialog(null,"Error, usted no ha creado el lugar "+place,"Mensaje de sistema",JOptionPane.ERROR_MESSAGE);            
                        return null;
                    }else{
                        if( pn.getTransition(transition) == null ){
                            JOptionPane.showMessageDialog(null,"Error, usted no ha creado la transicion "+transition,"Mensaje de sistema",JOptionPane.ERROR_MESSAGE);            
                            return null;
                        }else{
                            pn.arc(name,pn.getTransition(transition),pn.getPlace(place));                     
                        }
                    }                                                   
                    
                }
            }                                                            
        }                             
        return pn;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createReachabilityTree;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadStochasticPetriNet;
    private javax.swing.JButton simulateStochasticPetriNet;
    private javax.swing.JTextArea spnArea;
    // End of variables declaration//GEN-END:variables
}
